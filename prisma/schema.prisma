generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model File {
  id   String @id @default(uuid())
  path String
  user User[]
}

model Forgot {
  id        Int       @id @default(autoincrement())
  hash      String
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  userId    String?
  user      User?     @relation(fields: [userId], references: [id])

  @@index([hash])
}

model Migrations {
  id        Int    @id @default(autoincrement())
  timestamp BigInt
  name      String
}

model Role {
  id   Int    @id
  name String
  user User[]
}

model Session {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  userId    String?
  user      User?     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Status {
  id   Int    @id
  name String
  user User[]
}

model User {
  id        String        @id @default(uuid())
  email     String?       @unique
  password  String        @default(uuid())
  provider  AuthProviders @default(EMAIL)
  socialId  String?
  firstName String?
  lastName  String?
  hash      String?       @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  deletedAt DateTime?
  forgot    Forgot[]
  session   Session[]

  photoId  String?
  file     File?   @relation(fields: [photoId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  // 
  roleId   Int?
  role     Role?   @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  // 
  statusId Int?
  status   Status? @relation(fields: [statusId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  // 
  shelf    Shelf[]
  box      Box[]
  card     Card[]
  // @@index([firstName, socialId, hash, lastName])

  @@index([id])
  @@index([email])
}

model Shelf {
  id          String   @id @default(uuid())
  title       String
  index       Int
  isCollapsed Boolean  @default(false)
  // 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // 
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  boxId       Box[]

  // @@unique([id, index])
  card Card[]
}

model Box {
  id      String @id @default(uuid())
  index   Int
  timing  String @default("{'minutes': 0,'hours': 0,'days': 0,'weeks': 0,'months': 0}")
  // 
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  // 
  shelfId String
  shelf   Shelf  @relation(fields: [shelfId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  card    Card[]
}

model Card {
  id           String    @id @default(uuid())
  question     String
  answer       String
  lastTraining DateTime?
  nextTraining DateTime?
  // 
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  //
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  // 
  shelfId      String
  shelf        Shelf     @relation(fields: [shelfId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  // 
  boxId        String
  box          Box       @relation(fields: [boxId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([userId])
  @@index([shelfId])
  @@index([boxId])
}

enum AuthProviders {
  EMAIL
  FACEBOOK
  GOOGLE
  TWITTER
  APPLE
}
