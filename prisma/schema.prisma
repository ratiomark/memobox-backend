generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto]
}

model File {
  id   String @id @default(uuid())
  path String
  user User[]
}

model Forgot {
  id        Int       @id @default(autoincrement())
  hash      String
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  userId    String?   @db.Uuid
  user      User?     @relation(fields: [userId], references: [id])

  @@index([hash])
}

model Migrations {
  id        Int    @id @default(autoincrement())
  timestamp BigInt
  name      String
}

model Role {
  id   Int    @id
  name String
  user User[]
}

model Session {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  userId    String?   @db.Uuid
  user      User?     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Status {
  id   Int    @id
  name String
  user User[]
}

model User {
  id        String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  // id        String        @id @default(uuid()) @db.Uuid
  email     String?       @unique
  password  String        @default(uuid())
  provider  AuthProviders @default(EMAIL)
  socialId  String?
  firstName String?
  lastName  String?
  hash      String?       @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now())
  // updatedAt будет отвечать за изменение карточки юзером   @updatedAt
  deletedAt DateTime?
  forgot    Forgot[]
  session   Session[]
  // 
  photoId   String?
  file      File?         @relation(fields: [photoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // 
  roleId    Int?
  role      Role?         @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // 
  statusId  Int?
  status    Status?       @relation(fields: [statusId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // 
  shelf     Shelf[]
  box       Box[]
  card      Card[]
  // @@index([firstName, socialId, hash, lastName])

  @@index([id])
  @@index([email])
}

model Shelf {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  // id          String   @id @default(uuid()) @db.Uuid
  title       String
  index       Int
  isCollapsed Boolean  @default(false)
  // 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  // 
  userId      String?  @db.Uuid
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  box         Box[]
  card        Card[]

  @@unique([userId, title])
}

model Box {
  id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  // id      String @id @default(uuid()) @db.Uuid
  index   Int
  // timing  JSON @default("{'minutes': 0,'hours': 0,'days': 0,'weeks': 0,'months': 0}")
  // timing  String @default("{'minutes': 0,'hours': 0,'days': 0,'weeks': 0,'months': 0}")
  timing  Json   @default("{\"minutes\": 5, \"hours\": 0,\"days\": 0,\"weeks\": 0,\"months\": 0}")
  // 
  userId  String @db.Uuid
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // 
  shelfId String @db.Uuid
  shelf   Shelf  @relation(fields: [shelfId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  card    Card[]
}

model Card {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  // id           String    @id @default(uuid()) @db.Uuid
  question     String
  answer       String
  lastTraining DateTime?
  nextTraining DateTime?
  // 
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  //
  userId       String    @db.Uuid
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // 
  shelfId      String    @db.Uuid
  shelf        Shelf     @relation(fields: [shelfId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // 
  boxId        String    @db.Uuid
  box          Box       @relation(fields: [boxId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
  @@index([shelfId])
  @@index([boxId])
}

enum AuthProviders {
  EMAIL
  FACEBOOK
  GOOGLE
  TWITTER
  APPLE
}
