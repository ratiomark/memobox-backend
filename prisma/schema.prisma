generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto]
}

model File {
  id   String @id @default(uuid())
  path String
  user User[]

  @@map("file")
}

model Forgot {
  id        Int       @id @default(autoincrement())
  hash      String
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  userId    String?   @db.Uuid
  user      User?     @relation(fields: [userId], references: [id])

  @@index([hash])
  @@map("forgot")
}

model Migrations {
  id        Int    @id @default(autoincrement())
  timestamp BigInt
  name      String
}

model Role {
  id   Int    @id
  name String
  user User[]

  @@map("role")
}

model Session {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  userId    String?   @db.Uuid
  user      User?     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("session")
}

model Status {
  id   Int    @id
  name String
  user User[]

  @@map("status")
}

model User {
  id                  String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  // id        String        @id @default(uuid()) @db.Uuid
  email               String?              @unique
  password            String               @default(uuid())
  provider            AuthProviders        @default(EMAIL)
  socialId            String?
  firstName           String?
  lastName            String?
  hash                String?              @unique
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now())
  // updatedAt будет отвечать за изменение карточки юзером   @updatedAt
  deletedAt           DateTime?
  forgot              Forgot[]
  session             Session[]
  // 
  photoId             String?
  file                File?                @relation(fields: [photoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // 
  roleId              Int?
  role                Role?                @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // 
  statusId            Int?
  status              Status?              @relation(fields: [statusId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // 
  language            String?              @default("en")
  timezone            String?              @default("UTC")
  // 
  shelf               Shelf[]
  box                 Box[]
  card                Card[]
  // @@index([firstName, socialId, hash, lastName])
  shelfTemplate       ShelfTemplate?
  timeSleep           TimeSleep?
  notification        Notification?
  missedTraining      MissedTraining?
  dataAndSettingsJson DataAndSettingsJson?
  notificationHistory NotificationHistory?
  PushSubscription    PushSubscription[]

  @@index([id])
  @@index([email])
  @@map("user")
}

model Shelf {
  id                  String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  // id                  String   @id @default(uuid()) @db.Uuid
  title               String
  index               Int
  isCollapsed         Boolean              @default(true)
  missedTrainingValue MissedTrainingValue? @default(none)
  isDeleted           Boolean?             @default(false)
  // 
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now()) @updatedAt
  deletedAt           DateTime?
  // 
  userId              String               @db.Uuid
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  box                 Box[]
  card                Card[]

  // @@unique([userId, title])
  @@map("shelf")
}

model Box {
  id                  String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  // id      String @id @default(uuid()) @db.Uuid
  index               Int
  // timing  JSON @default("{'minutes': 0,'hours': 0,'days': 0,'weeks': 0,'months': 0}")
  // timing  String @default("{'minutes': 0,'hours': 0,'days': 0,'weeks': 0,'months': 0}")
  timing              Json?                @default("{\"minutes\": 5, \"hours\": 0,\"days\": 0,\"weeks\": 0,\"months\": 0}")
  specialType         BoxSpecialType       @default(none)
  missedTrainingValue MissedTrainingValue? @default(none)
  isDeleted           Boolean?             @default(false)
  // 
  deletedAt           DateTime?
  // 
  userId              String               @db.Uuid
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // 
  shelfId             String               @db.Uuid
  shelf               Shelf                @relation(fields: [shelfId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  card                Card[]

  @@map("box")
}

model Card {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  // id           String    @id @default(uuid()) @db.Uuid
  question     String?
  answer       String?
  lastTraining DateTime?
  nextTraining DateTime?
  isDeleted    Boolean?  @default(false)
  // 
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  //
  userId       String    @db.Uuid
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // 
  shelfId      String    @db.Uuid
  shelf        Shelf     @relation(fields: [shelfId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // 
  boxId        String    @db.Uuid
  box          Box       @relation(fields: [boxId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
  @@index([shelfId])
  @@index([boxId])
  @@index([nextTraining])
  @@map("card")
}

model ShelfTemplate {
  id       Int     @id @default(autoincrement())
  // id       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  // 
  template Json    @default("[{\"minutes\":5,\"hours\":0,\"days\":0,\"weeks\":0,\"months\":0},{\"minutes\":0,\"hours\":8,\"days\":0,\"weeks\":0,\"months\":0},{\"minutes\":0,\"hours\":0,\"days\":1,\"weeks\":0,\"months\":0},{\"minutes\":0,\"hours\":0,\"days\":3,\"weeks\":0,\"months\":0},{\"minutes\":0,\"hours\":0,\"days\":14,\"weeks\":0,\"months\":0},{\"minutes\":0,\"hours\":0,\"days\":28,\"weeks\":0,\"months\":0},{\"minutes\":0,\"hours\":0,\"days\":0,\"weeks\":3,\"months\":0},{\"minutes\":0,\"hours\":0,\"days\":2,\"weeks\":3,\"months\":1},{\"minutes\":0,\"hours\":0,\"days\":0,\"weeks\":0,\"months\":2},{\"minutes\":0,\"hours\":0,\"days\":0,\"weeks\":4,\"months\":2}]")
  // template Json    @default("{\"title\": \"New shelf\",\"index\": 0,\"isCollapsed\": false,\"missedTrainingValue\": \"none\"}")
  // 
  userId   String? @unique @db.Uuid
  user     User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("shelf_template")
}

model TimeSleep {
  id       Int     @id @default(autoincrement())
  // id       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  // 
  settings Json    @default("{\"isTimeSleepEnabled\":true,\"isDayByDayOptionEnabled\":false,\"generalTimeSleepData\":{\"up\":{\"hours\":7,\"minutes\":0},\"down\":{\"hours\":23,\"minutes\":0}}}")
  // template Json    @default("{\"title\": \"New shelf\",\"index\": 0,\"isCollapsed\": false,\"missedTrainingValue\": \"none\"}")
  // 
  userId   String? @unique @db.Uuid
  user     User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("time_sleep")
}

model Notification {
  id       Int     @id @default(autoincrement())
  // id       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  // 
  settings Json    @default("{\"mobilePushEnabled\":false,\"emailNotificationsEnabled\":false,\"minimumCardsForPush\":15,\"minimumCardsForEmailNotification\":10,\"notificationEmails\":[]}")
  // template Json    @default("{\"title\": \"New shelf\",\"index\": 0,\"isCollapsed\": false,\"missedTrainingValue\": \"none\"}")
  // 
  userId   String? @unique @db.Uuid
  user     User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("notification")
}

model MissedTraining {
  id       Int                 @id @default(autoincrement())
  // id       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  // 
  settings MissedTrainingValue @default(none)
  // template Json    @default("{\"title\": \"New shelf\",\"index\": 0,\"isCollapsed\": false,\"missedTrainingValue\": \"none\"}")
  // 
  userId   String?             @unique @db.Uuid
  user     User?               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("missed_training")
}

model NotificationHistory {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  // createdAt      DateTime @default(now())
  userId           String   @unique @db.Uuid
  notificationTime DateTime
  // updatedAt      DateTime @default(now()) @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
  @@map("notification_history")
}

model PushSubscription {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String   @db.Uuid
  browser      String   @default("unknown")
  osName       String   @default("unknown")
  endpoint     String   @unique
  subscription Json
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
  @@map("push_subscription")
}

model DataAndSettingsJson {
  id            Int    @id @default(autoincrement())
  // 
  // theme: Theme, isFirstVisit: boolean, settingsPageHasBeenOpen: boolean
  jsonSavedData Json?  @map("json_saved_data")
  // viewPageCardRowsCount: number, commonShelfCollapsed: boolean, viewPageColumns: number
  jsonSettings  Json?  @map("json_settings")
  // 
  userId        String @unique @db.Uuid
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
  @@map("data_and_settings_json")
}

enum AuthProviders {
  EMAIL
  FACEBOOK
  GOOGLE
  TWITTER
  APPLE
}

enum MissedTrainingValue {
  none
  backwards
  additional
}

enum BoxSpecialType {
  none
  new
  learnt
}
